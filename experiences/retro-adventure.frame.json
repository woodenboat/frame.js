{
	"config": {},
	"libraries": [
		"../examples/js/libs/three.min.js"
	],
	"includes": [
		[
			"Renderer",
			[
				"var dom = FRAME.getDOM();",
				"",
				"var renderer = new THREE.WebGLRenderer( { preserveDrawingBuffer: true } );",
				"renderer.autoClear = false;",
				"renderer.setPixelRatio( window.devicePixelRatio );",
				"renderer.setSize( dom.clientWidth, dom.clientHeight );",
				"dom.appendChild( renderer.domElement );",
				"",
				"window.addEventListener( 'resize', function () {",
				"\t",
				"\trenderer.setSize( dom.clientWidth, dom.clientHeight );",
				"\t",
				"} );",
				"",
				"FRAME.addResource( 'renderer', renderer );"
			]
		]
	],
	"effects": [
		[
			"Clear",
			[
				"var parameters = {",
				"\tclearColor: new FRAME.Parameters.Boolean( 'Color', true ),",
				"\tclearDepth: new FRAME.Parameters.Boolean( 'Depth', true ),",
				"\tclearStencil: new FRAME.Parameters.Boolean( 'Stencil', true )",
				"};",
				"",
				"var renderer = FRAME.getResource( 'renderer' );",
				"",
				"function start(){}",
				"",
				"function update( progress ){",
				"",
				"",
				"\trenderer.clear(",
				"\t\tthis.parameters.clearColor.value === true,",
				"\t\tthis.parameters.clearDepth.value === true,",
				"\t\tthis.parameters.clearStencil.value === true",
				"\t);",
				"}"
			]
		],
		[
			"SceneOneModule",
			[
				"var dom = FRAME.getDOM();",
				"",
				"var renderer = FRAME.getResource( 'renderer' );",
				"",
				"var camera = new THREE.PerspectiveCamera( 60, dom.clientWidth / dom.clientHeight, 1, 1000 );",
				"",
				"window.addEventListener( 'resize', function () {",
				"\tcamera.aspect = dom.clientWidth / dom.clientHeight;",
				"\tcamera.updateProjectionMatrix();",
				"} );",
				"",
				"",
				"var scene = new THREE.Scene();",
				"",
				"var light1 = new THREE.PointLight( 0x8844ff, 5, 100 );",
				"scene.add( light1 );",
				"\t\t\t",
				"var light2 = new THREE.PointLight( 0xff2288, 5, 100 );",
				"scene.add( light2 );",
				"\t\t",
				"var group = new THREE.Object3D();",
				"scene.add( group );",
				"\t\t",
				"var geometry = new THREE.IcosahedronGeometry( 5, 0 );",
				"var material = new THREE.MeshLambertMaterial( { shading: THREE.FlatShading } );",
				"",
				"for ( var i = 0; i < 500; i ++ ) {",
				"",
				"\tvar object = new THREE.Mesh( geometry, material );",
				"\tobject.position.x = Math.random() * 200 - 100;",
				"\tobject.position.y = Math.random() * 200 - 100;",
				"\tobject.position.z = Math.random() * 200 - 100;",
				"\tobject.rotation.x = Math.random();",
				"\tobject.rotation.y = Math.random();",
				"\tgroup.add( object );",
				"",
				"}",
				"",
				"var startPosition = new THREE.Vector3();",
				"var endPosition = new THREE.Vector3();",
				"var deltaPosition = new THREE.Vector3();",
				"",
				"var parameters = {",
				"",
				"\tstartPosition: new FRAME.Parameters.Vector3( 'Camera Start', [ 100, 100, 100 ] ),",
				"\tendPosition:   new FRAME.Parameters.Vector3( 'Camera End', [ - 100, 100, 100 ] )",
				"",
				"}",
				"",
				"function start(){",
				"",
				"\tstartPosition.fromArray( this.parameters.startPosition.value );",
				"\tendPosition.fromArray( this.parameters.endPosition.value );",
				"\tdeltaPosition.subVectors( endPosition, startPosition );",
				"}",
				"",
				"function update( progress ){",
				"",
				"\tcamera.position.copy( deltaPosition );",
				"\tcamera.position.multiplyScalar( progress );",
				"\tcamera.position.add( startPosition );",
				"\tcamera.lookAt( scene.position );",
				"\t\t\t\t",
				"\tlight1.position.x = Math.sin( progress * 5 ) * 100;",
				"\tlight1.position.z = Math.cos( progress * 5 ) * 100;",
				"\t\t\t\t",
				"\tlight2.position.x = Math.sin( progress * 5 + 2 ) * 100;  ",
				"\tlight2.position.z = Math.cos( progress * 5 + 2 ) * 100;",
				"\t\t\t\t",
				"\tfor ( var i = 0, l = group.children.length; i < l; i ++ ) {",
				"\t\t\t\t\t",
				"\t\tvar mesh = group.children[ i ];",
				"\t\tvar scale = Math.sin( progress * 10 + mesh.position.distanceTo( scene.position ) * 0.5 ) + 1;",
				"\t\tmesh.rotation.x = scale * 2;",
				"\t\tmesh.rotation.y = scale;",
				"\t\tmesh.scale.set( scale, scale, scale );",
				"\t\t\t\t\t",
				"\t}",
				"\t\t\t\t",
				"\trenderer.render( scene, camera )",
				"",
				"}\t"
			]
		],
		[
			"Fade Out",
			[
				"var parameters = {",
				"\tcolor:   new FRAME.Parameters.Color( 'Color', 0xffffff ),",
				"\topacity: new FRAME.Parameters.Float( 'Opacity', 1, 0, 1 )",
				"};",
				"",
				"var renderer = FRAME.getResource( 'renderer' );",
				"",
				"var camera = new THREE.OrthographicCamera( -1, 1, 1, -1, 0, 1 );",
				"var scene = new THREE.Scene();",
				"var mesh = new THREE.Mesh(",
				"\tnew THREE.PlaneGeometry( 2, 2 ),",
				"\tnew THREE.MeshBasicMaterial( { transparent: true } )",
				");",
				"scene.add( mesh );",
				"",
				"function start(){}",
				"",
				"function update( progress ){",
				"",
				"\tmesh.material.color.setHex( parameters.color.value );",
				"\tmesh.material.opacity = parameters.opacity.value * ( 1 - progress );",
				"\trenderer.render( scene, camera );",
				"",
				"}"
			]
		],
		[
			"Colour",
			[
				"var parameters = {",
				"\tcolor: new FRAME.Parameters.Color( 'Color', 12312063\t ),",
				"\topacity: new FRAME.Parameters.Float( 'Opacity', 0, 0, 0 )",
				"};",
				"",
				"var renderer = FRAME.getResource( 'renderer' );",
				"",
				"var camera = new THREE.OrthographicCamera( -1, 1, 1, -1, 0, 1 );",
				"",
				"var scene = new THREE.Scene();",
				"",
				"var geometry = new THREE.PlaneGeometry( 2, 2 );",
				"var material = new THREE.MeshBasicMaterial( { depthTest: false, depthWrite: false, transparent: true } );",
				"",
				"scene.add( new THREE.Mesh( geometry, material ) );",
				"",
				"function start(){}",
				"",
				"function end(){}",
				"",
				"function update( progress ){",
				"\t",
				"\tmaterial.color.setHex( this.parameters.color.value );",
				"\tmaterial.opacity = this.parameters.opacity.value;",
				"",
				"\trenderer.render( scene, camera );",
				"}"
			]
		],
		[
			"AudioPlayer",
			[
				"var audio = document.createElement( 'audio' );",
				"",
				"var source = document.createElement( 'source' );",
				"source.src = '../experiences/audio/doodle-02.mp3';",
				"audio.appendChild( source );",
				"",
				"function start(){",
				"",
				"\tplayer.setAudio( audio );",
				"",
				"}",
				"",
				"function end(){ ",
				"",
				"\tplayer.setAudio( null );",
				"",
				"}",
				"",
				"function update( progress ){}"
			]
		],
		[
			"Scene2bModule",
			[
				"var parameters = {",
				"",
				"\tstartPosition:       new FRAME.Parameters.Vector3( 'Camera Start', [ 400, 0, -100 ] ),",
				"\tendPosition:         new FRAME.Parameters.Vector3( 'Camera End', [ 50, 0, 2100 ] ),",
				"\tstartPositionTarget: new FRAME.Parameters.Vector3( 'Camera Target Start', [ 0, 0, 0 ] ),",
				"\tendPositionTarget:   new FRAME.Parameters.Vector3( 'Camera Target End', [ 0, 0, 2000 ] ),",
				"\tlightIntensity:      new FRAME.Parameters.Float( 'Light intensity', 0.84 )",
				"",
				"};",
				"",
				"var dom = FRAME.getDOM();",
				"",
				"var renderer = FRAME.getResource( 'renderer' );",
				"",
				"var camera = new THREE.PerspectiveCamera( 60, dom.clientWidth / dom.clientHeight, 1, 1500 );",
				"camera.up.y = 0.5;",
				"camera.up.x = -1;",
				"camera.up.normalize();",
				"",
				"var cameraTarget = new THREE.Vector3();",
				"",
				"var scene = new THREE.Scene();",
				"",
				"var light1 = new THREE.PointLight( 0x88ff44, 5, 300 );",
				"scene.add( light1 );",
				"",
				"var light2 = new THREE.PointLight( 0x8844ff, 3, 300 );",
				"scene.add( light2 );",
				"",
				"// tunnel",
				"\t",
				"var plane = new THREE.PlaneGeometry( 5, 5 );",
				"var geometry = new THREE.Geometry() ;",
				"var material = new THREE.MeshLambertMaterial( {",
				"\tcolor: 0x606060,",
				"\tshading: THREE.FlatShading,",
				"\tside: THREE.DoubleSide",
				"} );",
				"\t",
				"var object = new THREE.Mesh( plane, material );",
				"\t",
				"for ( var i = 0; i < 800; i ++ ) {",
				"",
				"\tvar radius = 50 + ( Math.random() * 150 );",
				"",
				"\tobject.position.x = Math.random() - 0.5;",
				"\tobject.position.y = Math.random() - 0.5;",
				"\tobject.position.z = 0;",
				"\tobject.position.normalize();",
				"\tobject.position.multiplyScalar( radius );",
				"\tobject.lookAt( scene.position );",
				"\tobject.position.z = ( i * 4 ) - 500;",
				"\tobject.scale.x = Math.random() * 10;",
				"\tobject.scale.y = Math.random() * 10;",
				"\tobject.scale.z = Math.random() * 20;",
				"\tTHREE.GeometryUtils.merge( geometry, object );",
				"",
				"}",
				"",
				"var tunnel1 = new THREE.Mesh( geometry, material );",
				"scene.add( tunnel1 );",
				"\t",
				"var geometry = new THREE.Geometry();",
				"var material = new THREE.MeshLambertMaterial( {",
				"\tcolor: 0x606060,",
				"\tshading: THREE.FlatShading,",
				"\tside: THREE.DoubleSide,",
				"\twireframe: true",
				"} );",
				"",
				"var object = new THREE.Mesh( plane, material );",
				"\t",
				"for ( var i = 0; i < 800; i ++ ) {",
				"",
				"\tvar radius = 50 + ( Math.random() * 150 );",
				"",
				"\tobject.position.x = Math.random() - 0.5;",
				"\tobject.position.y = Math.random() - 0.5;",
				"\tobject.position.z = 0;",
				"\tobject.position.normalize();",
				"\tobject.position.multiplyScalar( radius );",
				"\tobject.lookAt( scene.position );",
				"\tobject.position.z = ( i * 4 ) - 500;",
				"\tobject.scale.x = Math.random() * 10;",
				"\tobject.scale.y = Math.random() * 10;",
				"\tobject.scale.z = Math.random() * 20;",
				"\tTHREE.GeometryUtils.merge( geometry, object );",
				"",
				"}",
				"",
				"var tunnel2 = new THREE.Mesh( geometry, material );",
				"scene.add( tunnel2 );",
				"",
				"// sphere",
				"\t",
				"var sphere = new THREE.Object3D();",
				"scene.add( sphere );",
				"",
				"var material = new THREE.MeshLambertMaterial( {",
				"\tshading: THREE.FlatShading",
				"} );",
				"\t",
				"sphere.add( new THREE.Mesh( new THREE.IcosahedronGeometry( 20, 0 ), material ) );",
				"sphere.add( new THREE.Mesh( new THREE.CylinderGeometry( 20, 20, 20, 3 ), material ) );",
				"sphere.add( new THREE.Mesh( new THREE.CylinderGeometry( 20, 20, 20, 5 ), material ) );",
				"sphere.add( new THREE.Mesh( new THREE.OctahedronGeometry( 20, 0 ), material ) );",
				"sphere.add( new THREE.Mesh( new THREE.IcosahedronGeometry( 20, 1 ), material ) );",
				"sphere.add( new THREE.Mesh( new THREE.TetrahedronGeometry( 20, 0 ), material ) );",
				"sphere.add( new THREE.Mesh( new THREE.TetrahedronGeometry( 20, 2 ), material ) );",
				"",
				"var startPosition = new THREE.Vector3();",
				"var endPosition = new THREE.Vector3();",
				"var deltaPosition = new THREE.Vector3();",
				"\t",
				"var startPositionTarget = new THREE.Vector3();",
				"var endPositionTarget = new THREE.Vector3();",
				"var deltaPositionTarget = new THREE.Vector3();",
				"",
				"var prevShape = 0;",
				"",
				"function start(){",
				"\tstartPosition.fromArray( this.parameters.startPosition.value );",
				"\tendPosition.fromArray( this.parameters.endPosition.value );",
				"\tdeltaPosition.subVectors( endPosition, startPosition );",
				"",
				"\tstartPositionTarget.fromArray( this.parameters.startPositionTarget.value );",
				"\tendPositionTarget.fromArray( this.parameters.endPositionTarget.value );",
				"\tdeltaPositionTarget.subVectors( endPositionTarget, startPositionTarget );",
				"}",
				"",
				"function end(){}",
				"",
				"function update( progress ){",
				"\tsphere.position.z = progress * 2000;",
				"\tsphere.rotation.x = progress * 6;",
				"\tsphere.rotation.z = progress * 6;",
				"",
				"\tlight1.intensity = this.parameters.lightIntensity.value * 6;",
				"",
				"\tlight1.position.z = sphere.position.z + 50;",
				"\tlight2.position.z = sphere.position.z - 50;",
				"",
				"\tvar shape = Math.floor( progress * 125 ) % sphere.children.length;",
				"\t\t\t\t",
				"\tif ( shape !== prevShape ) {",
				"\t\t\t\t\t",
				"\t\tfor ( var i = 0, l = sphere.children.length; i < l; i ++ ) {",
				"\t\t\t\t\t\t",
				"\t\t\tvar object = sphere.children[ i ];",
				"\t\t\tobject.visible = i === shape;",
				"\t\t\t\t\t\t",
				"\t\t\t}",
				"\t\t\t\t",
				"\t\t\tprevShape = shape;",
				"\t\t\t\t\t",
				"\t\t}",
				"\t\t\t\t",
				"\ttunnel1.rotation.z = progress * 2;",
				"\ttunnel2.rotation.z = - progress * 2;",
				"",
				"\tcamera.position.copy( deltaPosition );",
				"\tcamera.position.multiplyScalar( progress );",
				"\tcamera.position.add( startPosition );",
				"",
				"\tcameraTarget.copy( deltaPositionTarget );",
				"\tcameraTarget.multiplyScalar( progress );",
				"\tcameraTarget.add( startPositionTarget );",
				"",
				"\tcamera.lookAt( cameraTarget );",
				"",
				"\trenderer.render( scene, camera );",
				"}"
			]
		],
		[
			"Scene2Module",
			[
				"var parameters = {",
				"",
				"\tstartPosition:       new FRAME.Parameters.Vector3( 'Camera Start', [ 50, -50, 300 ] ),",
				"\tendPosition:         new FRAME.Parameters.Vector3( 'Camera End', [ - 50, - 25, 1700 ] ),",
				"\tstartPositionTarget: new FRAME.Parameters.Vector3( 'Camera Target Start', [ 0, 0, -50 ] ),",
				"\tendPositionTarget:   new FRAME.Parameters.Vector3( 'Camera Target End', [ 0, 0, 2050 ] ),",
				"\tlightIntensity:      new FRAME.Parameters.Float( 'Light intensity', 0.84 )",
				"",
				"};",
				"",
				"var dom = FRAME.getDOM();",
				"",
				"var renderer = FRAME.getResource( 'renderer' );",
				"",
				"var camera = new THREE.PerspectiveCamera( 60, dom.clientWidth / dom.clientHeight, 1, 1500 );",
				"camera.up.y = 0.5;",
				"camera.up.x = -1;",
				"camera.up.normalize();",
				"",
				"var cameraTarget = new THREE.Vector3();",
				"",
				"var scene = new THREE.Scene();",
				"",
				"var light1 = new THREE.PointLight( 0xff8844, 5, 300 );",
				"scene.add( light1 );",
				"",
				"var light2 = new THREE.PointLight( 0x8844ff, 3, 300 );",
				"scene.add( light2 );",
				"",
				"// tunnel",
				"",
				"var plane = new THREE.PlaneGeometry( 5, 5 );",
				"var geometry = new THREE.Geometry() ;",
				"var material = new THREE.MeshLambertMaterial( {",
				"\tcolor: 0x606060,",
				"\tshading: THREE.FlatShading,",
				"\tside: THREE.DoubleSide",
				"} );",
				"",
				"var object = new THREE.Mesh( plane, material );",
				"",
				"for ( var i = 0; i < 800; i ++ ) {",
				"",
				"\tvar radius = 50 + ( Math.random() * 150 );",
				"",
				"\tobject.position.x = Math.random() - 0.5;",
				"\tobject.position.y = Math.random() - 0.5;",
				"\tobject.position.z = 0;",
				"\tobject.position.normalize();",
				"\tobject.position.multiplyScalar( radius );",
				"\tobject.lookAt( scene.position );",
				"\tobject.position.z = ( i * 4 ) - 500;",
				"\tobject.scale.x = Math.random() * 10;",
				"\tobject.scale.y = Math.random() * 10;",
				"\tobject.scale.z = Math.random() * 20;",
				"",
				"\tTHREE.GeometryUtils.merge( geometry, object );",
				"",
				"}",
				"",
				"var tunnel1 = new THREE.Mesh( geometry, material );",
				"scene.add( tunnel1 );",
				"",
				"var geometry = new THREE.Geometry();",
				"var material = new THREE.MeshLambertMaterial( {",
				"\tcolor: 0x606060,",
				"\tshading: THREE.FlatShading,",
				"\tside: THREE.DoubleSide,",
				"\twireframe: true",
				"} );",
				"",
				"var object = new THREE.Mesh( plane, material );",
				"",
				"for ( var i = 0; i < 800; i ++ ) {",
				"",
				"\tvar radius = 50 + ( Math.random() * 150 );",
				"",
				"\tobject.position.x = Math.random() - 0.5;",
				"\tobject.position.y = Math.random() - 0.5;",
				"\tobject.position.z = 0;",
				"\tobject.position.normalize();",
				"\tobject.position.multiplyScalar( radius );",
				"\tobject.lookAt( scene.position );",
				"\tobject.position.z = ( i * 4 ) - 500;",
				"\tobject.scale.x = Math.random() * 10;",
				"\tobject.scale.y = Math.random() * 10;",
				"\tobject.scale.z = Math.random() * 20;",
				"",
				"\tTHREE.GeometryUtils.merge( geometry, object );",
				"",
				"}",
				"",
				"var tunnel2 = new THREE.Mesh( geometry, material );",
				"scene.add( tunnel2 );",
				"",
				"// sphere",
				"",
				"var sphere = new THREE.Object3D();",
				"scene.add( sphere );",
				"",
				"var material = new THREE.MeshLambertMaterial( {",
				"\tshading: THREE.FlatShading",
				"} );",
				"",
				"sphere.add( new THREE.Mesh( new THREE.SphereGeometry( 20, 2, 2 ), material ) );",
				"sphere.add( new THREE.Mesh( new THREE.IcosahedronGeometry( 20, 0 ), material ) );",
				"sphere.add( new THREE.Mesh( new THREE.CubeGeometry( 20, 20, 20 ), material ) );",
				"sphere.add( new THREE.Mesh( new THREE.OctahedronGeometry( 20, 0 ), material ) );",
				"sphere.add( new THREE.Mesh( new THREE.IcosahedronGeometry( 20, 1 ), material ) );",
				"sphere.add( new THREE.Mesh( new THREE.TetrahedronGeometry( 20, 0 ), material ) );",
				"sphere.add( new THREE.Mesh( new THREE.TetrahedronGeometry( 20, 1 ), material ) );",
				"",
				"//",
				"",
				"var startPosition = new THREE.Vector3();",
				"var endPosition = new THREE.Vector3();",
				"var deltaPosition = new THREE.Vector3();",
				"",
				"var startPositionTarget = new THREE.Vector3();",
				"var endPositionTarget = new THREE.Vector3();",
				"var deltaPositionTarget = new THREE.Vector3();",
				"",
				"var prevShape = 0;",
				"",
				"function start(){",
				"",
				"\tstartPosition.fromArray( this.parameters.startPosition.value );",
				"\tendPosition.fromArray( this.parameters.endPosition.value );",
				"\tdeltaPosition.subVectors( endPosition, startPosition );",
				"",
				"\tstartPositionTarget.fromArray( this.parameters.startPositionTarget.value );",
				"\tendPositionTarget.fromArray( this.parameters.endPositionTarget.value );",
				"\tdeltaPositionTarget.subVectors( endPositionTarget, startPositionTarget );",
				"}",
				"",
				"function end(){}",
				"",
				"function update( progress ){",
				"",
				"\tsphere.position.z = progress * 2000;",
				"\tsphere.rotation.x = progress * 8;",
				"\tsphere.rotation.z = progress * 8;",
				"",
				"\tlight1.intensity = this.parameters.lightIntensity.value * 8;",
				"",
				"\tlight1.position.z = sphere.position.z + 50;",
				"\tlight2.position.z = sphere.position.z - 50;",
				"",
				"\tvar shape = Math.floor( progress * 125 ) % sphere.children.length;",
				"",
				"\tif ( shape !== prevShape ) {",
				"\t",
				"\t\tfor ( var i = 0, l = sphere.children.length; i < l; i ++ ) {",
				"\t\t",
				"\t\t\tvar object = sphere.children[ i ];",
				"\t\t\tobject.visible = i === shape;",
				"\t\t",
				"\t\t}",
				"\t",
				"\t\tprevShape = shape;",
				"\t",
				"}",
				"",
				"\ttunnel1.rotation.z = progress * 2;",
				"\ttunnel2.rotation.z = - progress * 2;",
				"",
				"\tcamera.position.copy( deltaPosition );",
				"\tcamera.position.multiplyScalar( progress );",
				"\tcamera.position.add( startPosition );",
				"",
				"\tcameraTarget.copy( deltaPositionTarget );",
				"\tcameraTarget.multiplyScalar( progress );",
				"\tcameraTarget.add( startPositionTarget );",
				"",
				"\tcamera.lookAt( cameraTarget );",
				"",
				"\trenderer.render( scene, camera );",
				"\t",
				"}"
			]
		],
		[
			"Scene3Module",
			[
				"var parameters = {",
				"",
				"\tstartPosition: new FRAME.Parameters.Vector3( 'Camera Start', [ 600, 0, 0 ] ),",
				"\tendPosition:   new FRAME.Parameters.Vector3( 'Camera End', [ 600, 0, 0 ] )",
				"",
				"};",
				"",
				"var dom = FRAME.getDOM();",
				"",
				"var renderer = FRAME.getResource( 'renderer' );",
				"",
				"var camera = new THREE.PerspectiveCamera( 60, dom.clientWidth / dom.clientHeight, 1, 1000 );",
				"",
				"var scene = new THREE.Scene();",
				"",
				"var light1 = new THREE.PointLight( 0xff8844, 5, 300 );",
				"scene.add( light1 );",
				"",
				"var light1b = new THREE.PointLight( 0x8844ff, 3, 300 );",
				"scene.add( light1b );",
				"",
				"var light2 = new THREE.PointLight( 0x88ff44, 5, 300 );",
				"scene.add( light2 );",
				"",
				"var light2b = new THREE.PointLight( 0x8844ff, 3, 300 );",
				"scene.add( light2b );",
				"",
				"var group = new THREE.Object3D();",
				"scene.add( group );",
				"",
				"var geometry =  new THREE.TetrahedronGeometry( 20, 0 );",
				"var material = new THREE.MeshLambertMaterial( {",
				"\tcolor: 0x404040,",
				"\tshading: THREE.FlatShading",
				"} );",
				"",
				"for ( var i = 0; i < 600; i ++ ) {",
				"",
				"\tvar object = new THREE.Mesh( geometry, material );",
				"\tobject.position.x = Math.random() * 1000 - 500;",
				"\tobject.position.y = Math.random() * 1000 - 500;",
				"\tobject.position.z = Math.random() * 1000 - 500;",
				"\tobject.scale.multiplyScalar( Math.random() * Math.random() * 3 );",
				"\tgroup.add( object );",
				"",
				"}",
				"",
				"var geometry =  new THREE.TetrahedronGeometry( 20, 1 );",
				"",
				"for ( var i = 0; i < 600; i ++ ) {",
				"",
				"\tvar object = new THREE.Mesh( geometry, material );",
				"\tobject.position.x = Math.random() * 1000 - 500;",
				"\tobject.position.y = Math.random() * 1000 - 500;",
				"\tobject.position.z = Math.random() * 1000 - 500;",
				"\tobject.scale.multiplyScalar( Math.random() * Math.random() * 3 );",
				"\tgroup.add( object );",
				"",
				"}",
				"",
				"",
				"// sphere",
				"",
				"var sphere1 = new THREE.Object3D();",
				"scene.add( sphere1 );",
				"",
				"var material = new THREE.MeshLambertMaterial( {",
				"\tshading: THREE.FlatShading",
				"} );",
				"",
				"sphere1.add( new THREE.Mesh( new THREE.SphereGeometry( 20, 2, 2 ), material ) );",
				"sphere1.add( new THREE.Mesh( new THREE.IcosahedronGeometry( 20, 0 ), material ) );",
				"sphere1.add( new THREE.Mesh( new THREE.CubeGeometry( 20, 20, 20 ), material ) );",
				"sphere1.add( new THREE.Mesh( new THREE.OctahedronGeometry( 20, 0 ), material ) );",
				"sphere1.add( new THREE.Mesh( new THREE.IcosahedronGeometry( 20, 1 ), material ) );",
				"sphere1.add( new THREE.Mesh( new THREE.TetrahedronGeometry( 20, 0 ), material ) );",
				"sphere1.add( new THREE.Mesh( new THREE.TetrahedronGeometry( 20, 1 ), material ) );",
				"",
				"var sphere2 = new THREE.Object3D();",
				"scene.add( sphere2 );",
				"",
				"sphere2.add( new THREE.Mesh( new THREE.IcosahedronGeometry( 20, 0 ), material ) );",
				"sphere2.add( new THREE.Mesh( new THREE.CylinderGeometry( 20, 20, 20, 3 ), material ) );",
				"sphere2.add( new THREE.Mesh( new THREE.CylinderGeometry( 20, 20, 20, 5 ), material ) );",
				"sphere2.add( new THREE.Mesh( new THREE.OctahedronGeometry( 20, 0 ), material ) );",
				"sphere2.add( new THREE.Mesh( new THREE.IcosahedronGeometry( 20, 1 ), material ) );",
				"sphere2.add( new THREE.Mesh( new THREE.TetrahedronGeometry( 20, 0 ), material ) );",
				"sphere2.add( new THREE.Mesh( new THREE.TetrahedronGeometry( 20, 2 ), material ) );",
				"",
				"//",
				"\t",
				"var startPosition = new THREE.Vector3();",
				"var endPosition = new THREE.Vector3();",
				"var deltaPosition = new THREE.Vector3();",
				"",
				"var prevShape = 0;",
				"",
				"function start(){",
				"",
				"\tstartPosition.fromArray( this.parameters.startPosition.value );",
				"\tendPosition.fromArray( this.parameters.endPosition.value );",
				"\tdeltaPosition.subVectors( endPosition, startPosition );",
				"}",
				"",
				"function end(){}",
				"",
				"function update( progress ){",
				"",
				"\tcamera.position.copy( deltaPosition );",
				"\tcamera.position.multiplyScalar( progress );",
				"\tcamera.position.add( startPosition );",
				"\tcamera.position.x += Math.max( 0, progress - 0.495 ) * 500; ",
				"\tcamera.lookAt( scene.position );",
				"\t",
				"\tsphere1.position.z = progress * 700 - 700;",
				"\tsphere1.rotation.x = progress * 12;",
				"\tsphere1.rotation.z = progress * 12;",
				"",
				"\tlight1.position.z = sphere1.position.z + 50;",
				"\tlight1b.position.z = sphere1.position.z - 50;",
				"",
				"\tsphere2.position.z = progress * - 700 + 700;",
				"\tsphere2.rotation.x = - progress * 12;",
				"\tsphere2.rotation.z = - progress * 12;",
				"",
				"\tlight2.position.z = sphere2.position.z - 50;",
				"\tlight2b.position.z = sphere2.position.z + 50;",
				"",
				"\tvar shape = Math.floor( progress * 255 ) % sphere1.children.length;",
				"\t",
				"\tif ( shape !== prevShape ) {",
				"\t\t",
				"\t\tfor ( var i = 0, l = sphere1.children.length; i < l; i ++ ) {",
				"\t\t\t",
				"\t\t\tvar object = sphere1.children[ i ];",
				"\t\t\tobject.visible = i === shape;",
				"",
				"\t\t\tvar object = sphere2.children[ i ];",
				"\t\t\tobject.visible = i === shape;",
				"",
				"\t\t}",
				"",
				"\t\tprevShape = shape;",
				"\t\t",
				"\t}",
				"",
				"\tfor ( var i = 0, l = group.children.length; i < l; i ++ ) {",
				"",
				"\t\tvar mesh = group.children[ i ];",
				"\t\tmesh.rotation.x = i + progress * 6;",
				"\t\tmesh.rotation.y = i + progress * 4;",
				"\t\t",
				"\t}",
				"\t",
				"\trenderer.render( scene, camera );",
				"}"
			]
		],
		[
			"SceneSevenModule",
			[
				"var parameters = {",
				"",
				"\tstartPosition:       new FRAME.Parameters.Vector3( 'Camera Start', [ 0, 0, 50 ] ),",
				"\tendPosition:         new FRAME.Parameters.Vector3( 'Camera End', [ 0, 50, 2000 ] ),",
				"\tstartPositionTarget: new FRAME.Parameters.Vector3( 'Camera Target Start', [ 0, 0, 0 ] ),",
				"\tendPositionTarget:   new FRAME.Parameters.Vector3( 'Camera Target End', [ 0, 500, 0 ] )",
				"",
				"};",
				"",
				"var dom = FRAME.getDOM();",
				"",
				"var renderer = FRAME.getResource( 'renderer' );",
				"",
				"var camera = new THREE.PerspectiveCamera( 60, dom.clientWidth / dom.clientHeight, 1, 4000 );",
				"var cameraTarget = new THREE.Vector3();",
				"",
				"var scene = new THREE.Scene();",
				"",
				"var light = new THREE.PointLight( 0xff0000, 5, 300 );",
				"scene.add( light );",
				"",
				"var light1 = new THREE.PointLight( 0x8844ff, 5, 1000 );",
				"scene.add( light1 );",
				"",
				"// city",
				"",
				"var plane = new THREE.CubeGeometry( 2, 2, 2 );",
				"plane.applyMatrix( new THREE.Matrix4().makeTranslation( 0, 1, 0 ) );",
				"var geometry = new THREE.Geometry() ;",
				"var material = new THREE.MeshLambertMaterial( {",
				"\tcolor: 0x808080,",
				"\tshading: THREE.FlatShading",
				"} );",
				"",
				"var object = new THREE.Mesh( plane, material );",
				"",
				"for ( var i = 0; i < 800; i ++ ) {",
				"",
				"\tobject.position.x = Math.random() * 2000 - 1000;",
				"\tobject.position.z = Math.random() * 2000 - 1000;",
				"\tobject.scale.x = Math.random() * 20;",
				"\tobject.scale.y = Math.random() * Math.random() * 100;",
				"\tobject.scale.z = Math.random() * 20;",
				"\tTHREE.GeometryUtils.merge( geometry, object );",
				"",
				"}",
				"",
				"var city = new THREE.Mesh( geometry, material );",
				"scene.add( city );",
				"",
				"var geometry = new THREE.Geometry();",
				"var material = new THREE.MeshLambertMaterial( {",
				"\tcolor: 0x606060,",
				"\tshading: THREE.FlatShading,",
				"\tside: THREE.DoubleSide,",
				"\twireframe: true",
				"} );",
				"",
				"var object = new THREE.Mesh( plane, material );",
				"",
				"for ( var i = 0; i < 800; i ++ ) {",
				"",
				"\tobject.position.x = Math.random() * 2000 - 1000;",
				"\tobject.position.z = Math.random() * 2000 - 1000;",
				"\tobject.scale.x = Math.random() * 20;",
				"\tobject.scale.y = Math.random() * Math.random() * 100;",
				"\tobject.scale.z = Math.random() * 20;",
				"\tTHREE.GeometryUtils.merge( geometry, object );",
				"",
				"}",
				"",
				"var city2 = new THREE.Mesh( geometry, material );",
				"scene.add( city2 );",
				"",
				"//",
				"",
				"var group = new THREE.Object3D();",
				"scene.add( group );",
				"",
				"var geometry =  new THREE.TetrahedronGeometry( 12, 0 );",
				"var material = new THREE.MeshLambertMaterial( {",
				"\temissive: 0xf00000,",
				"\tshading: THREE.FlatShading",
				"} );",
				"",
				"for ( var i = 0; i < 500; i ++ ) {",
				"",
				"\tvar object = new THREE.Mesh( geometry, material );",
				"\tobject.position.x = Math.random() - 0.5;",
				"\tobject.position.z = Math.random() - 0.5;",
				"\tobject.position.normalize();",
				"\tobject.position.multiplyScalar( Math.random() * 100 );",
				"\tobject.position.y = - Math.random() * 2000 + 2000;",
				"\tgroup.add( object );",
				"",
				"}",
				"",
				"var sphere = new THREE.Object3D();",
				"sphere.scale.multiplyScalar( 5 );",
				"scene.add( sphere );",
				"",
				"sphere.add( new THREE.Mesh( new THREE.SphereGeometry( 20, 2, 2 ), material ) );",
				"sphere.add( new THREE.Mesh( new THREE.IcosahedronGeometry( 20, 0 ), material ) );",
				"sphere.add( new THREE.Mesh( new THREE.CubeGeometry( 20, 20, 20 ), material ) );",
				"sphere.add( new THREE.Mesh( new THREE.OctahedronGeometry( 20, 0 ), material ) );",
				"sphere.add( new THREE.Mesh( new THREE.IcosahedronGeometry( 20, 1 ), material ) );",
				"sphere.add( new THREE.Mesh( new THREE.TetrahedronGeometry( 20, 0 ), material ) );",
				"sphere.add( new THREE.Mesh( new THREE.TetrahedronGeometry( 20, 1 ), material ) );",
				"",
				"//",
				"\t",
				"var startPosition = new THREE.Vector3();",
				"var endPosition = new THREE.Vector3();",
				"var deltaPosition = new THREE.Vector3();",
				"",
				"var startPositionTarget = new THREE.Vector3();",
				"var endPositionTarget = new THREE.Vector3();",
				"var deltaPositionTarget = new THREE.Vector3();",
				"",
				"var prevShape = 0;",
				"",
				"function start(){",
				"",
				"",
				"\tstartPosition.fromArray( this.parameters.startPosition.value );",
				"\tendPosition.fromArray( this.parameters.endPosition.value );",
				"\tdeltaPosition.subVectors( endPosition, startPosition );",
				"\t",
				"\tstartPositionTarget.fromArray( this.parameters.startPositionTarget.value );",
				"\tendPositionTarget.fromArray( this.parameters.endPositionTarget.value );",
				"\tdeltaPositionTarget.subVectors( endPositionTarget, startPositionTarget );",
				"}",
				"",
				"function end(){}",
				"",
				"function update( progress ){",
				"",
				"",
				"\tcamera.position.copy( deltaPosition );",
				"\tcamera.position.multiplyScalar( progress );",
				"\tcamera.position.add( startPosition );",
				"",
				"\tcameraTarget.copy( deltaPositionTarget );",
				"\tcameraTarget.multiplyScalar( progress );",
				"\tcameraTarget.add( startPositionTarget );",
				"",
				"\tcamera.lookAt( cameraTarget );",
				"",
				"\tsphere.position.y = 1900 - ( progress  * 1700 );",
				"",
				"\tgroup.position.y = sphere.position.y;",
				"\tgroup.rotation.y = progress * 10;",
				"\tlight.position.y = sphere.position.y;",
				"",
				"\tvar shape = Math.floor( progress * 525 ) % sphere.children.length;",
				"",
				"\tif ( shape !== prevShape ) {",
				"\t\t",
				"\t\tfor ( var i = 0, l = sphere.children.length; i < l; i ++ ) {",
				"\t\t\t",
				"\t\t\tvar object = sphere.children[ i ];",
				"\t\t\tobject.visible = i === shape;",
				"\t\t\t",
				"\t\t}",
				"\t\t",
				"\t\tprevShape = shape;",
				"\t\t",
				"\t}",
				"",
				"\tfor ( var i = 0, l = group.children.length; i < l; i ++ ) {",
				"",
				"\t\tvar mesh = group.children[ i ];",
				"\t\tmesh.rotation.x = i + progress * 240;",
				"\t\tmesh.rotation.z = i + progress * 120;",
				"\t\t",
				"\t}",
				"",
				"\trenderer.render( scene, camera );",
				"}"
			]
		],
		[
			"TextModule",
			[
				"var parameters = {",
				"",
				"\ttext:          new FRAME.Parameters.String( 'Text', 'Retro Adventure' ),",
				"\tstartPosition: new FRAME.Parameters.Vector3( 'Camera Start', [ 0, 0, 18 ] ),",
				"\tendPosition:   new FRAME.Parameters.Vector3( 'Camera End', [ 0, 0, 15 ] )",
				"",
				"};",
				" ",
				"var dom = FRAME.getDOM();",
				"",
				"var renderer = FRAME.getResource( 'renderer' );",
				"",
				"var camera = new THREE.PerspectiveCamera( 60, dom.clientWidth / dom.clientHeight, 1, 1000 );",
				"",
				"var scene = new THREE.Scene();",
				"",
				"var texts = {};",
				"var currentText = null;",
				"",
				"var material = new THREE.LineBasicMaterial( { depthTest: false, opacity: 0.9, transparent: true } );",
				"",
				"//",
				"",
				"var startPosition = new THREE.Vector3();",
				"var endPosition = new THREE.Vector3();",
				"var deltaPosition = new THREE.Vector3();",
				"",
				"function initialise(){",
				"",
				"\tvar string = this.parameters.text;",
				"",
				"\tif ( texts[ string ] === undefined ) {",
				"\t\t",
				"\t\tvar shapes = THREE.FontUtils.generateShapes( string, {",
				"\t\t\tfont: \"helvetiker\",",
				"\t\t\tsize: 2",
				"\t\t} );",
				"",
				"\t\tvar text = new THREE.Object3D();",
				"",
				"\t\tvar offset = new THREE.Box3();",
				"",
				"\t\tfor ( var i = 0; i < shapes.length; i ++ ) {",
				"",
				"\t\t\tvar shape = shapes[ i ];",
				"",
				"\t\t\tvar geometry = shape.createPointsGeometry();",
				"\t\t\tgeometry.computeBoundingBox();",
				"",
				"\t\t\toffset.union( geometry.boundingBox );",
				"",
				"\t\t\tvar mesh = new THREE.Line( geometry, material );",
				"\t\t\ttext.add( mesh );",
				"",
				"\t\t\tif ( shape.holes.length > 0 ) {",
				"",
				"\t\t\t\tfor ( var j = 0; j < shape.holes.length; j ++ ) {",
				"",
				"\t\t\t\t\tvar hole = shape.holes[ j ];",
				"\t\t\t\t\tshapes.push( hole.toShapes()[ 0 ] );",
				"",
				"\t\t\t\t}",
				"",
				"\t\t\t}",
				"",
				"\t\t}",
				"",
				"\t\ttext.position.addVectors( offset.min, offset.max ).multiplyScalar( -0.5 );",
				"\t\t",
				"\t\ttexts[ this.parameters.text.value ] = text;",
				"",
				"\t}",
				"",
				"}",
				"",
				"function start(){",
				" ",
				"\tif ( currentText !== null ) {",
				"",
				"\t\tscene.remove( currentText );",
				"",
				"\t}",
				"",
				"\tvar string = this.parameters.text.value;",
				"",
				"\tif ( texts[ string ] === undefined ) {",
				"",
				"\t\tinitialise();",
				"",
				"\t}",
				"",
				"\tcurrentText = texts[ string ];",
				"\tscene.add( currentText );",
				"",
				"\tstartPosition.fromArray( this.parameters.startPosition.value );",
				"\tendPosition.fromArray( this.parameters.endPosition.value );",
				"\tdeltaPosition.subVectors( endPosition, startPosition );",
				"}",
				"",
				"function end(){}",
				"",
				"function update( progress ){",
				"",
				"\tcamera.position.copy( deltaPosition );",
				"\tcamera.position.multiplyScalar( progress );",
				"\tcamera.position.add( startPosition );",
				"\tcamera.lookAt( scene.position );",
				"\t",
				"\trenderer.render( scene, camera );",
				"}"
			]
		],
		[
			"SceneTwoModule",
			[
				"var parameters = {",
				"",
				"\tstartPosition:       new FRAME.Parameters.Vector3( 'Camera Start', [ 400, 0, -100 ] ),",
				"\tendPosition:         new FRAME.Parameters.Vector3( 'Camera End', [ 50, 0, 2100 ] ),",
				"\tstartPositionTarget: new FRAME.Parameters.Vector3( 'Camera Target Start', [ 0, 0, 0 ] ),",
				"\tendPositionTarget:   new FRAME.Parameters.Vector3( 'Camera Target End', [ 0, 0, 2000 ] ),",
				"\tlightIntensity:      new FRAME.Parameters.Float( 'Light intensity', 0.84 )",
				"",
				"};",
				"",
				"var dom = FRAME.getDOM();",
				"",
				"var renderer = FRAME.getResource( 'renderer' );",
				"",
				"var camera = new THREE.PerspectiveCamera( 60, dom.clientWidth / dom.clientHeight, 1, 1500 );",
				"camera.up.y = 0.5;",
				"camera.up.x = -1;",
				"camera.up.normalize();",
				"",
				"var cameraTarget = new THREE.Vector3();",
				"",
				"var scene = new THREE.Scene();",
				"",
				"var light1 = new THREE.PointLight( 0x88ff44, 5, 300 );",
				"scene.add( light1 );",
				"",
				"var light2 = new THREE.PointLight( 0x8844ff, 3, 300 );",
				"scene.add( light2 );",
				"",
				"// tunnel",
				"\t",
				"var plane = new THREE.PlaneGeometry( 5, 5 );",
				"var geometry = new THREE.Geometry() ;",
				"var material = new THREE.MeshLambertMaterial( {",
				"\tcolor: 0x606060,",
				"\tshading: THREE.FlatShading,",
				"\tside: THREE.DoubleSide",
				"} );",
				"\t",
				"var object = new THREE.Mesh( plane, material );",
				"\t",
				"for ( var i = 0; i < 800; i ++ ) {",
				"",
				"\tvar radius = 50 + ( Math.random() * 150 );",
				"",
				"\tobject.position.x = Math.random() - 0.5;",
				"\tobject.position.y = Math.random() - 0.5;",
				"\tobject.position.z = 0;",
				"\tobject.position.normalize();",
				"\tobject.position.multiplyScalar( radius );",
				"\tobject.lookAt( scene.position );",
				"\tobject.position.z = ( i * 4 ) - 500;",
				"\tobject.scale.x = Math.random() * 10;",
				"\tobject.scale.y = Math.random() * 10;",
				"\tobject.scale.z = Math.random() * 20;",
				"\tTHREE.GeometryUtils.merge( geometry, object );",
				"",
				"}",
				"",
				"var tunnel1 = new THREE.Mesh( geometry, material );",
				"scene.add( tunnel1 );",
				"\t",
				"var geometry = new THREE.Geometry();",
				"var material = new THREE.MeshLambertMaterial( {",
				"\tcolor: 0x606060,",
				"\tshading: THREE.FlatShading,",
				"\tside: THREE.DoubleSide,",
				"\twireframe: true",
				"} );",
				"",
				"var object = new THREE.Mesh( plane, material );",
				"\t",
				"for ( var i = 0; i < 800; i ++ ) {",
				"",
				"\tvar radius = 50 + ( Math.random() * 150 );",
				"",
				"\tobject.position.x = Math.random() - 0.5;",
				"\tobject.position.y = Math.random() - 0.5;",
				"\tobject.position.z = 0;",
				"\tobject.position.normalize();",
				"\tobject.position.multiplyScalar( radius );",
				"\tobject.lookAt( scene.position );",
				"\tobject.position.z = ( i * 4 ) - 500;",
				"\tobject.scale.x = Math.random() * 10;",
				"\tobject.scale.y = Math.random() * 10;",
				"\tobject.scale.z = Math.random() * 20;",
				"\tTHREE.GeometryUtils.merge( geometry, object );",
				"",
				"}",
				"",
				"var tunnel2 = new THREE.Mesh( geometry, material );",
				"scene.add( tunnel2 );",
				"",
				"// sphere",
				"\t",
				"var sphere = new THREE.Object3D();",
				"scene.add( sphere );",
				"",
				"var material = new THREE.MeshLambertMaterial( {",
				"\tshading: THREE.FlatShading",
				"} );",
				"\t",
				"sphere.add( new THREE.Mesh( new THREE.IcosahedronGeometry( 20, 0 ), material ) );",
				"sphere.add( new THREE.Mesh( new THREE.CylinderGeometry( 20, 20, 20, 3 ), material ) );",
				"sphere.add( new THREE.Mesh( new THREE.CylinderGeometry( 20, 20, 20, 5 ), material ) );",
				"sphere.add( new THREE.Mesh( new THREE.OctahedronGeometry( 20, 0 ), material ) );",
				"sphere.add( new THREE.Mesh( new THREE.IcosahedronGeometry( 20, 1 ), material ) );",
				"sphere.add( new THREE.Mesh( new THREE.TetrahedronGeometry( 20, 0 ), material ) );",
				"sphere.add( new THREE.Mesh( new THREE.TetrahedronGeometry( 20, 2 ), material ) );",
				"",
				"var startPosition = new THREE.Vector3();",
				"var endPosition = new THREE.Vector3();",
				"var deltaPosition = new THREE.Vector3();",
				"\t",
				"var startPositionTarget = new THREE.Vector3();",
				"var endPositionTarget = new THREE.Vector3();",
				"var deltaPositionTarget = new THREE.Vector3();",
				"",
				"var prevShape = 0;",
				"",
				"function start(){",
				"\tstartPosition.fromArray( this.parameters.startPosition.value );",
				"\tendPosition.fromArray( this.parameters.endPosition.value );",
				"\tdeltaPosition.subVectors( endPosition, startPosition );",
				"",
				"\tstartPositionTarget.fromArray( this.parameters.startPositionTarget.value );",
				"\tendPositionTarget.fromArray( this.parameters.endPositionTarget.value );",
				"\tdeltaPositionTarget.subVectors( endPositionTarget, startPositionTarget );",
				"}",
				"",
				"function end(){}",
				"",
				"function update( progress ){",
				"\tsphere.position.z = progress * 2000;",
				"\tsphere.rotation.x = progress * 6;",
				"\tsphere.rotation.z = progress * 6;",
				"",
				"\tlight1.intensity = this.parameters.lightIntensity.value * 6;",
				"",
				"\tlight1.position.z = sphere.position.z + 50;",
				"\tlight2.position.z = sphere.position.z - 50;",
				"",
				"\tvar shape = Math.floor( progress * 125 ) % sphere.children.length;",
				"\t\t\t\t",
				"\tif ( shape !== prevShape ) {",
				"\t\t\t\t\t",
				"\t\tfor ( var i = 0, l = sphere.children.length; i < l; i ++ ) {",
				"\t\t\t\t\t\t",
				"\t\t\tvar object = sphere.children[ i ];",
				"\t\t\tobject.visible = i === shape;",
				"\t\t\t\t\t\t",
				"\t\t\t}",
				"\t\t\t\t",
				"\t\t\tprevShape = shape;",
				"\t\t\t\t\t",
				"\t\t}",
				"\t\t\t\t",
				"\ttunnel1.rotation.z = progress * 2;",
				"\ttunnel2.rotation.z = - progress * 2;",
				"",
				"\tcamera.position.copy( deltaPosition );",
				"\tcamera.position.multiplyScalar( progress );",
				"\tcamera.position.add( startPosition );",
				"",
				"\tcameraTarget.copy( deltaPositionTarget );",
				"\tcameraTarget.multiplyScalar( progress );",
				"\tcameraTarget.add( startPositionTarget );",
				"",
				"\tcamera.lookAt( cameraTarget );",
				"",
				"\trenderer.render( scene, camera );",
				"}"
			]
		],
		[
			"SceneThreeModule",
			[
				"var parameters = {",
				"",
				"\tstartPosition:       new FRAME.Parameters.Vector3( 'Camera Start', [ 50, -50, 300 ] ),",
				"\tendPosition:         new FRAME.Parameters.Vector3( 'Camera End', [ - 50, - 25, 1700 ] ),",
				"\tstartPositionTarget: new FRAME.Parameters.Vector3( 'Camera Target Start', [ 0, 0, -50 ] ),",
				"\tendPositionTarget:   new FRAME.Parameters.Vector3( 'Camera Target End', [ 0, 0, 2050 ] ),",
				"\tlightIntensity:      new FRAME.Parameters.Float( 'Light intensity', 0.84 )",
				"",
				"};",
				"",
				"var dom = FRAME.getDOM();",
				"",
				"var renderer = FRAME.getResource( 'renderer' );",
				"",
				"var camera = new THREE.PerspectiveCamera( 60, dom.clientWidth / dom.clientHeight, 1, 1500 );",
				"camera.up.y = 0.5;",
				"camera.up.x = -1;",
				"camera.up.normalize();",
				"",
				"var cameraTarget = new THREE.Vector3();",
				"",
				"var scene = new THREE.Scene();",
				"",
				"var light1 = new THREE.PointLight( 0xff8844, 5, 300 );",
				"scene.add( light1 );",
				"",
				"var light2 = new THREE.PointLight( 0x8844ff, 3, 300 );",
				"scene.add( light2 );",
				"",
				"// tunnel",
				"",
				"var plane = new THREE.PlaneGeometry( 5, 5 );",
				"var geometry = new THREE.Geometry() ;",
				"var material = new THREE.MeshLambertMaterial( {",
				"\tcolor: 0x606060,",
				"\tshading: THREE.FlatShading,",
				"\tside: THREE.DoubleSide",
				"} );",
				"",
				"var object = new THREE.Mesh( plane, material );",
				"",
				"for ( var i = 0; i < 800; i ++ ) {",
				"",
				"\tvar radius = 50 + ( Math.random() * 150 );",
				"",
				"\tobject.position.x = Math.random() - 0.5;",
				"\tobject.position.y = Math.random() - 0.5;",
				"\tobject.position.z = 0;",
				"\tobject.position.normalize();",
				"\tobject.position.multiplyScalar( radius );",
				"\tobject.lookAt( scene.position );",
				"\tobject.position.z = ( i * 4 ) - 500;",
				"\tobject.scale.x = Math.random() * 10;",
				"\tobject.scale.y = Math.random() * 10;",
				"\tobject.scale.z = Math.random() * 20;",
				"",
				"\tTHREE.GeometryUtils.merge( geometry, object );",
				"",
				"}",
				"",
				"var tunnel1 = new THREE.Mesh( geometry, material );",
				"scene.add( tunnel1 );",
				"",
				"var geometry = new THREE.Geometry();",
				"var material = new THREE.MeshLambertMaterial( {",
				"\tcolor: 0x606060,",
				"\tshading: THREE.FlatShading,",
				"\tside: THREE.DoubleSide,",
				"\twireframe: true",
				"} );",
				"",
				"var object = new THREE.Mesh( plane, material );",
				"",
				"for ( var i = 0; i < 800; i ++ ) {",
				"",
				"\tvar radius = 50 + ( Math.random() * 150 );",
				"",
				"\tobject.position.x = Math.random() - 0.5;",
				"\tobject.position.y = Math.random() - 0.5;",
				"\tobject.position.z = 0;",
				"\tobject.position.normalize();",
				"\tobject.position.multiplyScalar( radius );",
				"\tobject.lookAt( scene.position );",
				"\tobject.position.z = ( i * 4 ) - 500;",
				"\tobject.scale.x = Math.random() * 10;",
				"\tobject.scale.y = Math.random() * 10;",
				"\tobject.scale.z = Math.random() * 20;",
				"",
				"\tTHREE.GeometryUtils.merge( geometry, object );",
				"",
				"}",
				"",
				"var tunnel2 = new THREE.Mesh( geometry, material );",
				"scene.add( tunnel2 );",
				"",
				"// sphere",
				"",
				"var sphere = new THREE.Object3D();",
				"scene.add( sphere );",
				"",
				"var material = new THREE.MeshLambertMaterial( {",
				"\tshading: THREE.FlatShading",
				"} );",
				"",
				"sphere.add( new THREE.Mesh( new THREE.SphereGeometry( 20, 2, 2 ), material ) );",
				"sphere.add( new THREE.Mesh( new THREE.IcosahedronGeometry( 20, 0 ), material ) );",
				"sphere.add( new THREE.Mesh( new THREE.CubeGeometry( 20, 20, 20 ), material ) );",
				"sphere.add( new THREE.Mesh( new THREE.OctahedronGeometry( 20, 0 ), material ) );",
				"sphere.add( new THREE.Mesh( new THREE.IcosahedronGeometry( 20, 1 ), material ) );",
				"sphere.add( new THREE.Mesh( new THREE.TetrahedronGeometry( 20, 0 ), material ) );",
				"sphere.add( new THREE.Mesh( new THREE.TetrahedronGeometry( 20, 1 ), material ) );",
				"",
				"//",
				"",
				"var startPosition = new THREE.Vector3();",
				"var endPosition = new THREE.Vector3();",
				"var deltaPosition = new THREE.Vector3();",
				"",
				"var startPositionTarget = new THREE.Vector3();",
				"var endPositionTarget = new THREE.Vector3();",
				"var deltaPositionTarget = new THREE.Vector3();",
				"",
				"var prevShape = 0;",
				"",
				"function start(){",
				"",
				"\tstartPosition.fromArray( this.parameters.startPosition.value );",
				"\tendPosition.fromArray( this.parameters.endPosition.value );",
				"\tdeltaPosition.subVectors( endPosition, startPosition );",
				"",
				"\tstartPositionTarget.fromArray( this.parameters.startPositionTarget.value );",
				"\tendPositionTarget.fromArray( this.parameters.endPositionTarget.value );",
				"\tdeltaPositionTarget.subVectors( endPositionTarget, startPositionTarget );",
				"}",
				"",
				"function end(){}",
				"",
				"function update( progress ){",
				"",
				"\tsphere.position.z = progress * 2000;",
				"\tsphere.rotation.x = progress * 8;",
				"\tsphere.rotation.z = progress * 8;",
				"",
				"\tlight1.intensity = this.parameters.lightIntensity.value * 8;",
				"",
				"\tlight1.position.z = sphere.position.z + 50;",
				"\tlight2.position.z = sphere.position.z - 50;",
				"",
				"\tvar shape = Math.floor( progress * 125 ) % sphere.children.length;",
				"",
				"\tif ( shape !== prevShape ) {",
				"\t",
				"\t\tfor ( var i = 0, l = sphere.children.length; i < l; i ++ ) {",
				"\t\t",
				"\t\t\tvar object = sphere.children[ i ];",
				"\t\t\tobject.visible = i === shape;",
				"\t\t",
				"\t\t}",
				"\t",
				"\t\tprevShape = shape;",
				"\t",
				"}",
				"",
				"\ttunnel1.rotation.z = progress * 2;",
				"\ttunnel2.rotation.z = - progress * 2;",
				"",
				"\tcamera.position.copy( deltaPosition );",
				"\tcamera.position.multiplyScalar( progress );",
				"\tcamera.position.add( startPosition );",
				"",
				"\tcameraTarget.copy( deltaPositionTarget );",
				"\tcameraTarget.multiplyScalar( progress );",
				"\tcameraTarget.add( startPositionTarget );",
				"",
				"\tcamera.lookAt( cameraTarget );",
				"",
				"\trenderer.render( scene, camera );",
				"\t",
				"}"
			]
		],
		[
			"SceneFourModule",
			[
				"var parameters = {",
				"",
				"\tstartPosition:       new FRAME.Parameters.Vector3( 'Camera Start', [ 50, 0, 100 ] ),",
				"\tendPosition:         new FRAME.Parameters.Vector3( 'Camera End', [ 150, 0, 2100 ] ),",
				"\tstartPositionTarget: new FRAME.Parameters.Vector3( 'Camera Target Start', [ 0, 0, -50 ] ),",
				"\tendPositionTarget:   new FRAME.Parameters.Vector3( 'Camera Target End', [ 0, 0, 2000 ] ),",
				"\tlightIntensity:      new FRAME.Parameters.Float( 'Light intensity', 0.84 )",
				"",
				"};",
				"",
				"var dom = FRAME.getDOM();",
				"",
				"var renderer = FRAME.getResource( 'renderer' );",
				"",
				"var camera = new THREE.PerspectiveCamera( 60, dom.clientWidth / dom.clientHeight, 1, 1500 );",
				"camera.up.y = 0.5;",
				"camera.up.x = -1;",
				"camera.up.normalize();",
				"",
				"var cameraTarget = new THREE.Vector3();",
				"",
				"var scene = new THREE.Scene();",
				"",
				"var light1 = new THREE.PointLight( 0x88ff44, 5, 300 );",
				"scene.add( light1 );",
				"",
				"var light2 = new THREE.PointLight( 0x8844ff, 3, 300 );",
				"scene.add( light2 );",
				"",
				"// tunnel",
				"\t",
				"var plane = new THREE.PlaneGeometry( 5, 5 );",
				"var geometry = new THREE.Geometry() ;",
				"var material = new THREE.MeshLambertMaterial( {",
				"\tcolor: 0x606060,",
				"\tshading: THREE.FlatShading,",
				"\tside: THREE.DoubleSide",
				"} );",
				"\t",
				"var object = new THREE.Mesh( plane, material );",
				"\t",
				"for ( var i = 0; i < 800; i ++ ) {",
				"",
				"\tvar radius = 50 + ( Math.random() * 150 );",
				"",
				"\tobject.position.x = Math.random() - 0.5;",
				"\tobject.position.y = Math.random() - 0.5;",
				"\tobject.position.z = 0;",
				"\tobject.position.normalize();",
				"\tobject.position.multiplyScalar( radius );",
				"\tobject.lookAt( scene.position );",
				"\tobject.position.z = ( i * 4 ) - 500;",
				"\tobject.scale.x = Math.random() * 10;",
				"\tobject.scale.y = Math.random() * 10;",
				"\tobject.scale.z = Math.random() * 20;",
				"\tTHREE.GeometryUtils.merge( geometry, object );",
				"",
				"}",
				"",
				"var tunnel1 = new THREE.Mesh( geometry, material );",
				"scene.add( tunnel1 );",
				"\t",
				"var geometry = new THREE.Geometry();",
				"var material = new THREE.MeshLambertMaterial( {",
				"\tcolor: 0x606060,",
				"\tshading: THREE.FlatShading,",
				"\tside: THREE.DoubleSide,",
				"\twireframe: true",
				"} );",
				"",
				"var object = new THREE.Mesh( plane, material );",
				"\t",
				"for ( var i = 0; i < 800; i ++ ) {",
				"",
				"\tvar radius = 50 + ( Math.random() * 150 );",
				"",
				"\tobject.position.x = Math.random() - 0.5;",
				"\tobject.position.y = Math.random() - 0.5;",
				"\tobject.position.z = 0;",
				"\tobject.position.normalize();",
				"\tobject.position.multiplyScalar( radius );",
				"\tobject.lookAt( scene.position );",
				"\tobject.position.z = ( i * 4 ) - 500;",
				"\tobject.scale.x = Math.random() * 10;",
				"\tobject.scale.y = Math.random() * 10;",
				"\tobject.scale.z = Math.random() * 20;",
				"\tTHREE.GeometryUtils.merge( geometry, object );",
				"",
				"}",
				"",
				"var tunnel2 = new THREE.Mesh( geometry, material );",
				"scene.add( tunnel2 );",
				"",
				"// sphere",
				"\t",
				"var sphere = new THREE.Object3D();",
				"scene.add( sphere );",
				"",
				"var material = new THREE.MeshLambertMaterial( {",
				"\tshading: THREE.FlatShading",
				"} );",
				"\t",
				"sphere.add( new THREE.Mesh( new THREE.IcosahedronGeometry( 20, 0 ), material ) );",
				"sphere.add( new THREE.Mesh( new THREE.CylinderGeometry( 20, 20, 20, 3 ), material ) );",
				"sphere.add( new THREE.Mesh( new THREE.CylinderGeometry( 20, 20, 20, 5 ), material ) );",
				"sphere.add( new THREE.Mesh( new THREE.OctahedronGeometry( 20, 0 ), material ) );",
				"sphere.add( new THREE.Mesh( new THREE.IcosahedronGeometry( 20, 1 ), material ) );",
				"sphere.add( new THREE.Mesh( new THREE.TetrahedronGeometry( 20, 0 ), material ) );",
				"sphere.add( new THREE.Mesh( new THREE.TetrahedronGeometry( 20, 2 ), material ) );",
				"",
				"var startPosition = new THREE.Vector3();",
				"var endPosition = new THREE.Vector3();",
				"var deltaPosition = new THREE.Vector3();",
				"\t",
				"var startPositionTarget = new THREE.Vector3();",
				"var endPositionTarget = new THREE.Vector3();",
				"var deltaPositionTarget = new THREE.Vector3();",
				"",
				"var prevShape = 0;",
				"",
				"function start(){",
				"\tstartPosition.fromArray( this.parameters.startPosition.value );",
				"\tendPosition.fromArray( this.parameters.endPosition.value );",
				"\tdeltaPosition.subVectors( endPosition, startPosition );",
				"",
				"\tstartPositionTarget.fromArray( this.parameters.startPositionTarget.value );",
				"\tendPositionTarget.fromArray( this.parameters.endPositionTarget.value );",
				"\tdeltaPositionTarget.subVectors( endPositionTarget, startPositionTarget );",
				"}",
				"",
				"function end(){}",
				"",
				"function update( progress ){",
				"\tsphere.position.z = progress * 2000;",
				"\tsphere.rotation.x = progress * 6;",
				"\tsphere.rotation.z = progress * 6;",
				"",
				"\tlight1.intensity = this.parameters.lightIntensity.value * 6;",
				"",
				"\tlight1.position.z = sphere.position.z + 50;",
				"\tlight2.position.z = sphere.position.z - 50;",
				"",
				"\tvar shape = Math.floor( progress * 125 ) % sphere.children.length;",
				"\t\t\t\t",
				"\tif ( shape !== prevShape ) {",
				"\t\t\t\t\t",
				"\t\tfor ( var i = 0, l = sphere.children.length; i < l; i ++ ) {",
				"\t\t\t\t\t\t",
				"\t\t\tvar object = sphere.children[ i ];",
				"\t\t\tobject.visible = i === shape;",
				"\t\t\t\t\t\t",
				"\t\t\t}",
				"\t\t\t\t",
				"\t\t\tprevShape = shape;",
				"\t\t\t\t\t",
				"\t\t}",
				"\t\t\t\t",
				"\ttunnel1.rotation.z = progress * 2;",
				"\ttunnel2.rotation.z = - progress * 2;",
				"",
				"\tcamera.position.copy( deltaPosition );",
				"\tcamera.position.multiplyScalar( progress );",
				"\tcamera.position.add( startPosition );",
				"",
				"\tcameraTarget.copy( deltaPositionTarget );",
				"\tcameraTarget.multiplyScalar( progress );",
				"\tcameraTarget.add( startPositionTarget );",
				"",
				"\tcamera.lookAt( cameraTarget );",
				"",
				"\trenderer.render( scene, camera );",
				"}"
			]
		],
		[
			"SceneFiveModule",
			[
				"var parameters = {",
				"",
				"\tstartPosition:       new FRAME.Parameters.Vector3( 'Camera Start', [ -100, -100, 1100 ] ),",
				"\tendPosition:         new FRAME.Parameters.Vector3( 'Camera End', [ - 50, 0, 2100 ] ),",
				"\tstartPositionTarget: new FRAME.Parameters.Vector3( 'Camera Target Start', [ 0, 0, 500 ] ),",
				"\tendPositionTarget:   new FRAME.Parameters.Vector3( 'Camera Target End', [ 0, 0, 2000 ] ),",
				"\tlightIntensity:      new FRAME.Parameters.Float( 'Light intensity', 0.84 )",
				"",
				"};",
				"",
				"var dom = FRAME.getDOM();",
				"",
				"var renderer = FRAME.getResource( 'renderer' );",
				"",
				"var camera = new THREE.PerspectiveCamera( 60, dom.clientWidth / dom.clientHeight, 1, 1500 );",
				"camera.up.y = 0.5;",
				"camera.up.x = -1;",
				"camera.up.normalize();",
				"",
				"var cameraTarget = new THREE.Vector3();",
				"",
				"var scene = new THREE.Scene();",
				"",
				"var light1 = new THREE.PointLight( 0xff8844, 5, 300 );",
				"scene.add( light1 );",
				"",
				"var light2 = new THREE.PointLight( 0x8844ff, 3, 300 );",
				"scene.add( light2 );",
				"",
				"// tunnel",
				"",
				"var plane = new THREE.PlaneGeometry( 5, 5 );",
				"var geometry = new THREE.Geometry() ;",
				"var material = new THREE.MeshLambertMaterial( {",
				"\tcolor: 0x606060,",
				"\tshading: THREE.FlatShading,",
				"\tside: THREE.DoubleSide",
				"} );",
				"",
				"var object = new THREE.Mesh( plane, material );",
				"",
				"for ( var i = 0; i < 800; i ++ ) {",
				"",
				"\tvar radius = 50 + ( Math.random() * 150 );",
				"",
				"\tobject.position.x = Math.random() - 0.5;",
				"\tobject.position.y = Math.random() - 0.5;",
				"\tobject.position.z = 0;",
				"\tobject.position.normalize();",
				"\tobject.position.multiplyScalar( radius );",
				"\tobject.lookAt( scene.position );",
				"\tobject.position.z = ( i * 4 ) - 500;",
				"\tobject.scale.x = Math.random() * 10;",
				"\tobject.scale.y = Math.random() * 10;",
				"\tobject.scale.z = Math.random() * 20;",
				"",
				"\tTHREE.GeometryUtils.merge( geometry, object );",
				"",
				"}",
				"",
				"var tunnel1 = new THREE.Mesh( geometry, material );",
				"scene.add( tunnel1 );",
				"",
				"var geometry = new THREE.Geometry();",
				"var material = new THREE.MeshLambertMaterial( {",
				"\tcolor: 0x606060,",
				"\tshading: THREE.FlatShading,",
				"\tside: THREE.DoubleSide,",
				"\twireframe: true",
				"} );",
				"",
				"var object = new THREE.Mesh( plane, material );",
				"",
				"for ( var i = 0; i < 800; i ++ ) {",
				"",
				"\tvar radius = 50 + ( Math.random() * 150 );",
				"",
				"\tobject.position.x = Math.random() - 0.5;",
				"\tobject.position.y = Math.random() - 0.5;",
				"\tobject.position.z = 0;",
				"\tobject.position.normalize();",
				"\tobject.position.multiplyScalar( radius );",
				"\tobject.lookAt( scene.position );",
				"\tobject.position.z = ( i * 4 ) - 500;",
				"\tobject.scale.x = Math.random() * 10;",
				"\tobject.scale.y = Math.random() * 10;",
				"\tobject.scale.z = Math.random() * 20;",
				"",
				"\tTHREE.GeometryUtils.merge( geometry, object );",
				"",
				"}",
				"",
				"var tunnel2 = new THREE.Mesh( geometry, material );",
				"scene.add( tunnel2 );",
				"",
				"// sphere",
				"",
				"var sphere = new THREE.Object3D();",
				"scene.add( sphere );",
				"",
				"var material = new THREE.MeshLambertMaterial( {",
				"\tshading: THREE.FlatShading",
				"} );",
				"",
				"sphere.add( new THREE.Mesh( new THREE.SphereGeometry( 20, 2, 2 ), material ) );",
				"sphere.add( new THREE.Mesh( new THREE.IcosahedronGeometry( 20, 0 ), material ) );",
				"sphere.add( new THREE.Mesh( new THREE.CubeGeometry( 20, 20, 20 ), material ) );",
				"sphere.add( new THREE.Mesh( new THREE.OctahedronGeometry( 20, 0 ), material ) );",
				"sphere.add( new THREE.Mesh( new THREE.IcosahedronGeometry( 20, 1 ), material ) );",
				"sphere.add( new THREE.Mesh( new THREE.TetrahedronGeometry( 20, 0 ), material ) );",
				"sphere.add( new THREE.Mesh( new THREE.TetrahedronGeometry( 20, 1 ), material ) );",
				"",
				"//",
				"",
				"var startPosition = new THREE.Vector3();",
				"var endPosition = new THREE.Vector3();",
				"var deltaPosition = new THREE.Vector3();",
				"",
				"var startPositionTarget = new THREE.Vector3();",
				"var endPositionTarget = new THREE.Vector3();",
				"var deltaPositionTarget = new THREE.Vector3();",
				"",
				"var prevShape = 0;",
				"",
				"function start(){",
				"",
				"\tstartPosition.fromArray( this.parameters.startPosition.value );",
				"\tendPosition.fromArray( this.parameters.endPosition.value );",
				"\tdeltaPosition.subVectors( endPosition, startPosition );",
				"",
				"\tstartPositionTarget.fromArray( this.parameters.startPositionTarget.value );",
				"\tendPositionTarget.fromArray( this.parameters.endPositionTarget.value );",
				"\tdeltaPositionTarget.subVectors( endPositionTarget, startPositionTarget );",
				"}",
				"",
				"function end(){}",
				"",
				"function update( progress ){",
				"",
				"\tsphere.position.z = progress * 2000;",
				"\tsphere.rotation.x = progress * 8;",
				"\tsphere.rotation.z = progress * 8;",
				"",
				"\tlight1.intensity = this.parameters.lightIntensity.value * 8;",
				"",
				"\tlight1.position.z = sphere.position.z + 50;",
				"\tlight2.position.z = sphere.position.z - 50;",
				"",
				"\tvar shape = Math.floor( progress * 125 ) % sphere.children.length;",
				"",
				"\tif ( shape !== prevShape ) {",
				"\t",
				"\t\tfor ( var i = 0, l = sphere.children.length; i < l; i ++ ) {",
				"\t\t",
				"\t\t\tvar object = sphere.children[ i ];",
				"\t\t\tobject.visible = i === shape;",
				"\t\t",
				"\t\t}",
				"\t",
				"\t\tprevShape = shape;",
				"\t",
				"}",
				"",
				"\ttunnel1.rotation.z = progress * 2;",
				"\ttunnel2.rotation.z = - progress * 2;",
				"",
				"\tcamera.position.copy( deltaPosition );",
				"\tcamera.position.multiplyScalar( progress );",
				"\tcamera.position.add( startPosition );",
				"",
				"\tcameraTarget.copy( deltaPositionTarget );",
				"\tcameraTarget.multiplyScalar( progress );",
				"\tcameraTarget.add( startPositionTarget );",
				"",
				"\tcamera.lookAt( cameraTarget );",
				"",
				"\trenderer.render( scene, camera );",
				"\t",
				"}"
			]
		],
		[
			"SceneSixModule",
			[
				"var parameters = {",
				"",
				"\tstartPosition: new FRAME.Parameters.Vector3( 'Camera Start', [ -600, 0, 0 ] ),",
				"\tendPosition:   new FRAME.Parameters.Vector3( 'Camera End', [ -600, 0, 0 ] )",
				"",
				"};",
				"",
				"var dom = FRAME.getDOM();",
				"",
				"var renderer = FRAME.getResource( 'renderer' );",
				"",
				"var camera = new THREE.PerspectiveCamera( 60, dom.clientWidth / dom.clientHeight, 1, 1000 );",
				"",
				"var scene = new THREE.Scene();",
				"",
				"var light1 = new THREE.PointLight( 0xff8844, 5, 300 );",
				"scene.add( light1 );",
				"",
				"var light1b = new THREE.PointLight( 0x8844ff, 3, 300 );",
				"scene.add( light1b );",
				"",
				"var light2 = new THREE.PointLight( 0x88ff44, 5, 300 );",
				"scene.add( light2 );",
				"",
				"var light2b = new THREE.PointLight( 0x8844ff, 3, 300 );",
				"scene.add( light2b );",
				"",
				"var group = new THREE.Object3D();",
				"scene.add( group );",
				"",
				"var geometry =  new THREE.TetrahedronGeometry( 20, 0 );",
				"var material = new THREE.MeshLambertMaterial( {",
				"\tcolor: 0x404040,",
				"\tshading: THREE.FlatShading",
				"} );",
				"",
				"for ( var i = 0; i < 600; i ++ ) {",
				"",
				"\tvar object = new THREE.Mesh( geometry, material );",
				"\tobject.position.x = Math.random() * 1000 - 500;",
				"\tobject.position.y = Math.random() * 1000 - 500;",
				"\tobject.position.z = Math.random() * 1000 - 500;",
				"\tobject.scale.multiplyScalar( Math.random() * Math.random() * 3 );",
				"\tgroup.add( object );",
				"",
				"}",
				"",
				"var geometry =  new THREE.TetrahedronGeometry( 20, 1 );",
				"",
				"for ( var i = 0; i < 600; i ++ ) {",
				"",
				"\tvar object = new THREE.Mesh( geometry, material );",
				"\tobject.position.x = Math.random() * 1000 - 500;",
				"\tobject.position.y = Math.random() * 1000 - 500;",
				"\tobject.position.z = Math.random() * 1000 - 500;",
				"\tobject.scale.multiplyScalar( Math.random() * Math.random() * 3 );",
				"\tgroup.add( object );",
				"",
				"}",
				"",
				"",
				"// sphere",
				"",
				"var sphere1 = new THREE.Object3D();",
				"scene.add( sphere1 );",
				"",
				"var material = new THREE.MeshLambertMaterial( {",
				"\tshading: THREE.FlatShading",
				"} );",
				"",
				"sphere1.add( new THREE.Mesh( new THREE.SphereGeometry( 20, 2, 2 ), material ) );",
				"sphere1.add( new THREE.Mesh( new THREE.IcosahedronGeometry( 20, 0 ), material ) );",
				"sphere1.add( new THREE.Mesh( new THREE.CubeGeometry( 20, 20, 20 ), material ) );",
				"sphere1.add( new THREE.Mesh( new THREE.OctahedronGeometry( 20, 0 ), material ) );",
				"sphere1.add( new THREE.Mesh( new THREE.IcosahedronGeometry( 20, 1 ), material ) );",
				"sphere1.add( new THREE.Mesh( new THREE.TetrahedronGeometry( 20, 0 ), material ) );",
				"sphere1.add( new THREE.Mesh( new THREE.TetrahedronGeometry( 20, 1 ), material ) );",
				"",
				"var sphere2 = new THREE.Object3D();",
				"scene.add( sphere2 );",
				"",
				"sphere2.add( new THREE.Mesh( new THREE.IcosahedronGeometry( 20, 0 ), material ) );",
				"sphere2.add( new THREE.Mesh( new THREE.CylinderGeometry( 20, 20, 20, 3 ), material ) );",
				"sphere2.add( new THREE.Mesh( new THREE.CylinderGeometry( 20, 20, 20, 5 ), material ) );",
				"sphere2.add( new THREE.Mesh( new THREE.OctahedronGeometry( 20, 0 ), material ) );",
				"sphere2.add( new THREE.Mesh( new THREE.IcosahedronGeometry( 20, 1 ), material ) );",
				"sphere2.add( new THREE.Mesh( new THREE.TetrahedronGeometry( 20, 0 ), material ) );",
				"sphere2.add( new THREE.Mesh( new THREE.TetrahedronGeometry( 20, 2 ), material ) );",
				"",
				"//",
				"\t",
				"var startPosition = new THREE.Vector3();",
				"var endPosition = new THREE.Vector3();",
				"var deltaPosition = new THREE.Vector3();",
				"",
				"var prevShape = 0;",
				"",
				"function start(){",
				"",
				"\tstartPosition.fromArray( this.parameters.startPosition.value );",
				"\tendPosition.fromArray( this.parameters.endPosition.value );",
				"\tdeltaPosition.subVectors( endPosition, startPosition );",
				"}",
				"",
				"function end(){}",
				"",
				"function update( progress ){",
				"",
				"\tcamera.position.copy( deltaPosition );",
				"\tcamera.position.multiplyScalar( progress );",
				"\tcamera.position.add( startPosition );",
				"\tcamera.position.x += Math.max( 0, progress - 0.495 ) * 500; ",
				"\tcamera.lookAt( scene.position );",
				"\t",
				"\tsphere1.position.z = progress * 700 - 700;",
				"\tsphere1.rotation.x = progress * 12;",
				"\tsphere1.rotation.z = progress * 12;",
				"",
				"\tlight1.position.z = sphere1.position.z + 50;",
				"\tlight1b.position.z = sphere1.position.z - 50;",
				"",
				"\tsphere2.position.z = progress * - 700 + 700;",
				"\tsphere2.rotation.x = - progress * 12;",
				"\tsphere2.rotation.z = - progress * 12;",
				"",
				"\tlight2.position.z = sphere2.position.z - 50;",
				"\tlight2b.position.z = sphere2.position.z + 50;",
				"",
				"\tvar shape = Math.floor( progress * 255 ) % sphere1.children.length;",
				"\t",
				"\tif ( shape !== prevShape ) {",
				"\t\t",
				"\t\tfor ( var i = 0, l = sphere1.children.length; i < l; i ++ ) {",
				"\t\t\t",
				"\t\t\tvar object = sphere1.children[ i ];",
				"\t\t\tobject.visible = i === shape;",
				"",
				"\t\t\tvar object = sphere2.children[ i ];",
				"\t\t\tobject.visible = i === shape;",
				"",
				"\t\t}",
				"",
				"\t\tprevShape = shape;",
				"\t\t",
				"\t}",
				"",
				"\tfor ( var i = 0, l = group.children.length; i < l; i ++ ) {",
				"",
				"\t\tvar mesh = group.children[ i ];",
				"\t\tmesh.rotation.x = i + progress * 6;",
				"\t\tmesh.rotation.y = i + progress * 4;",
				"\t\t",
				"\t}",
				"\t",
				"\trenderer.render( scene, camera );",
				"}"
			]
		]
	],
	"animations": [
		[
			"",
			0,
			176.96875,
			0,
			4,
			true
		],
		[
			"",
			0,
			4.3125,
			1,
			3,
			true
		],
		[
			"",
			0,
			176.96875,
			2,
			0,
			true
		],
		[
			"Scene 1",
			0.0625,
			16.021145209580844,
			4,
			1,
			true
		],
		[
			"Scene 2",
			16,
			24,
			4,
			10,
			true
		],
		[
			"Scene 3",
			24,
			40.08,
			4,
			11,
			true
		],
		[
			"Scene 4",
			40.02,
			56.01,
			4,
			12,
			true
		],
		[
			"Scene 5",
			56.03,
			71.93,
			4,
			13,
			true
		],
		[
			"Scene 6",
			71.93,
			95.96,
			4,
			14,
			true
		],
		[
			"Scene 7",
			95.97071111196422,
			136.09124812692278,
			4,
			8,
			true
		]
	]
}
